require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe LocalesController do

  # def mock_locale(stubs={})
  #   @mock_locale ||= mock_model(Locale, stubs).as_null_object
  # end
  # 
  # describe "GET index" do
  #   it "assigns all locales as @locales" do
  #     Locale.stub(:all) { [mock_locale] }
  #     get :index
  #     assigns(:locales).should eq([mock_locale])
  #   end
  # end
  # 
  # describe "GET show" do
  #   it "assigns the requested locale as @locale" do
  #     Locale.stub(:find).with("37") { mock_locale }
  #     get :show, :id => "37"
  #     assigns(:locale).should be(mock_locale)
  #   end
  # end
  # 
  # describe "GET new" do
  #   it "assigns a new locale as @locale" do
  #     Locale.stub(:new) { mock_locale }
  #     get :new
  #     assigns(:locale).should be(mock_locale)
  #   end
  # end
  # 
  # describe "GET edit" do
  #   it "assigns the requested locale as @locale" do
  #     Locale.stub(:find).with("37") { mock_locale }
  #     get :edit, :id => "37"
  #     assigns(:locale).should be(mock_locale)
  #   end
  # end
  # 
  # describe "POST create" do
  #   describe "with valid params" do
  #     it "assigns a newly created locale as @locale" do
  #       Locale.stub(:new).with({'these' => 'params'}) { mock_locale(:save => true) }
  #       post :create, :locale => {'these' => 'params'}
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "redirects to the created locale" do
  #       Locale.stub(:new) { mock_locale(:save => true) }
  #       post :create, :locale => {}
  #       response.should redirect_to(locale_url(mock_locale))
  #     end
  #   end
  # 
  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved locale as @locale" do
  #       Locale.stub(:new).with({'these' => 'params'}) { mock_locale(:save => false) }
  #       post :create, :locale => {'these' => 'params'}
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "re-renders the 'new' template" do
  #       Locale.stub(:new) { mock_locale(:save => false) }
  #       post :create, :locale => {}
  #       response.should render_template("new")
  #     end
  #   end
  # end
  # 
  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested locale" do
  #       Locale.stub(:find).with("37") { mock_locale }
  #       mock_locale.should_receive(:update_attributes).with({'these' => 'params'})
  #       put :update, :id => "37", :locale => {'these' => 'params'}
  #     end
  # 
  #     it "assigns the requested locale as @locale" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => true) }
  #       put :update, :id => "1"
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "redirects to the locale" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => true) }
  #       put :update, :id => "1"
  #       response.should redirect_to(locale_url(mock_locale))
  #     end
  #   end
  # 
  #   describe "with invalid params" do
  #     it "assigns the locale as @locale" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => false) }
  #       put :update, :id => "1"
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "re-renders the 'edit' template" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => false) }
  #       put :update, :id => "1"
  #       response.should render_template("edit")
  #     end
  #   end
  # end
  # 
  # describe "DELETE destroy" do
  #   it "destroys the requested locale" do
  #     Locale.stub(:find).with("37") { mock_locale }
  #     mock_locale.should_receive(:destroy)
  #     delete :destroy, :id => "37"
  #   end
  # 
  #   it "redirects to the locales list" do
  #     Locale.stub(:find) { mock_locale }
  #     delete :destroy, :id => "1"
  #     response.should redirect_to(locales_url)
  #   end
  # end

end
