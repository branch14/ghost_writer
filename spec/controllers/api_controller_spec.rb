require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ApiController do

  #def mock_locale(stubs={})
  #  @mock_locale ||= mock_model(Locale, stubs).as_null_object
  #end

  describe 'POST single_post' do
    it 'should handle missed' do

      back_then = 1.day.ago
      project = nil

      Timecop.freeze(back_then) do
        project = Factory(:project)
        project.clear_cache!
        project.locales.create :code => 'en'
        missed = { 'this.is.a.test' => { 'count' => { 'en' => 1 },
            'default' =>  { 'en' => 'This is a test.' } } }

        Delayed::Job.all.should be_empty
        post :single_post, :project_id => project.id ,:miss => missed.to_json
        response.should be_success
      end

      Delayed::Job.count.should == 1
      result = Delayed::Worker.new.work_off(1)
      result.should eq([1, 0])
      Delayed::Job.count.should == 0

      project.should have(4).tokens
      
      project.tokens.at_depth(0).first.key.should eq('this')
      project.tokens.at_depth(1).first.key.should eq('is')
      project.tokens.at_depth(2).first.key.should eq('a')
      project.tokens.at_depth(3).first.key.should eq('test')
      
      leaf = project.tokens.at_depth(3).first
      leaf.should have(1).translation
      translation = leaf.translations.first
      translation.locale.code.should == 'en'
      translation.content.should == 'This is a test.'

      request.env['If-Modified-Since'] = back_then
      post :single_post, :project_id => project.id

      response.should be_success
      expected = {'en'=>{'this'=>{'is'=>{'a'=>{'test'=>'This is a test.'}}}}}
      response.body.should eq(expected.to_yaml)

      project.clear_cache!
    end
  end

  describe 'GET single_get' do
    it 'should update cache' do

      project = Factory(:project)
      project.clear_cache!

      locale, token, first_request = nil, nil, nil
      Timecop.freeze(1.day.ago) do
        locale = project.locales.create :code => 'en'
        token = project.find_or_create_tokens('this.is.a.test').last
        attrs = {"en" => {"content" => "This is a test.", "count" => 1}}
        token.update_or_create_all_translations(attrs)

        expected = {'en' => {'this' => {'is' => {'a' => {'test' => 'This is a test.'}}}}}
        first_request = Time.now
        get :single_get, :project_id => project.id
        response.should be_success
        response.body.should eq(expected.to_yaml) 
      end

      token.translation_for(locale).update_attribute(:content, 'This is an updated test.')

      expected = {'en' => {'this' => {'is' => {'a' => {'test' => 'This is an updated test.'}}}}}
      request.env['If-Modified-Since'] = first_request
      get :single_get, :project_id => project.id
      response.should be_success
      response.body.should eq(expected.to_yaml) 

      project.clear_cache!
    end
  end

  # describe "GET index" do
  #   it "assigns all locales as @locales" do
  #     Locale.stub(:all) { [mock_locale] }
  #     get :index
  #     assigns(:locales).should eq([mock_locale])
  #   end
  # end
  # 
  # describe "GET show" do
  #   it "assigns the requested locale as @locale" do
  #     Locale.stub(:find).with("37") { mock_locale }
  #     get :show, :id => "37"
  #     assigns(:locale).should be(mock_locale)
  #   end
  # end
  # 
  # describe "GET new" do
  #   it "assigns a new locale as @locale" do
  #     Locale.stub(:new) { mock_locale }
  #     get :new
  #     assigns(:locale).should be(mock_locale)
  #   end
  # end
  # 
  # describe "GET edit" do
  #   it "assigns the requested locale as @locale" do
  #     Locale.stub(:find).with("37") { mock_locale }
  #     get :edit, :id => "37"
  #     assigns(:locale).should be(mock_locale)
  #   end
  # end
  # 
  # describe "POST create" do
  #   describe "with valid params" do
  #     it "assigns a newly created locale as @locale" do
  #       Locale.stub(:new).with({'these' => 'params'}) { mock_locale(:save => true) }
  #       post :create, :locale => {'these' => 'params'}
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "redirects to the created locale" do
  #       Locale.stub(:new) { mock_locale(:save => true) }
  #       post :create, :locale => {}
  #       response.should redirect_to(locale_url(mock_locale))
  #     end
  #   end
  # 
  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved locale as @locale" do
  #       Locale.stub(:new).with({'these' => 'params'}) { mock_locale(:save => false) }
  #       post :create, :locale => {'these' => 'params'}
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "re-renders the 'new' template" do
  #       Locale.stub(:new) { mock_locale(:save => false) }
  #       post :create, :locale => {}
  #       response.should render_template("new")
  #     end
  #   end
  # end
  # 
  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested locale" do
  #       Locale.stub(:find).with("37") { mock_locale }
  #       mock_locale.should_receive(:update_attributes).with({'these' => 'params'})
  #       put :update, :id => "37", :locale => {'these' => 'params'}
  #     end
  # 
  #     it "assigns the requested locale as @locale" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => true) }
  #       put :update, :id => "1"
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "redirects to the locale" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => true) }
  #       put :update, :id => "1"
  #       response.should redirect_to(locale_url(mock_locale))
  #     end
  #   end
  # 
  #   describe "with invalid params" do
  #     it "assigns the locale as @locale" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => false) }
  #       put :update, :id => "1"
  #       assigns(:locale).should be(mock_locale)
  #     end
  # 
  #     it "re-renders the 'edit' template" do
  #       Locale.stub(:find) { mock_locale(:update_attributes => false) }
  #       put :update, :id => "1"
  #       response.should render_template("edit")
  #     end
  #   end
  # end
  # 
  # describe "DELETE destroy" do
  #   it "destroys the requested locale" do
  #     Locale.stub(:find).with("37") { mock_locale }
  #     mock_locale.should_receive(:destroy)
  #     delete :destroy, :id => "37"
  #   end
  # 
  #   it "redirects to the locales list" do
  #     Locale.stub(:find) { mock_locale }
  #     delete :destroy, :id => "1"
  #     response.should redirect_to(locales_url)
  #   end
  # end

end
